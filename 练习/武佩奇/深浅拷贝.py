import copy
# 对于 数字 和 字符串 而言，赋值、浅拷贝和深拷贝无意义，因为其永远指向同一个内存地址。

# ######### 数字、字符串 #########
# n1 = 123
# # n1 = "i am alex age 10"
# print(id(n1))     #140735716717200
# # # ## 赋值 ##
# n2 = n1
# print(id(n2))     #140735716717200
# # # ## 浅拷贝 ##
# n2 = copy.copy(n1)
# print(id(n2))     #140735716717200
# #
# # # ## 深拷贝 ##
# n3 = copy.deepcopy(n1)
# print(id(n3))     #140735716717200


# 对于字典、元祖、列表 而言，进行赋值、浅拷贝和深拷贝时，其内存地址的变化是不同的。

# ## 赋值
# n1 = {"k1": "wu", "k2": 123, "k3": ["alex", 456]}
# print(id(n1))    #2961569769080
# n2 = n1
# print(id(n2))    #2961569769080

# ## 浅拷贝   ---   浅拷贝，在内存中只额外创建第一层数据
# n3 = {"k1": "wu", "k2": 123, "k3": ["alex", 456]}
# print(id(n3))    #2299084039800
# n4 = copy.copy(n3)
# print(id(n4))    #2299337414696

# ## 深拷贝   ---   在内存中将所有的数据重新创建一份（排除最后一层，即：python内部对字符串和数字的优化）
n5 = {"k1": "wu", "k2": 123, "k3": ["alex", 456]}
print(id(n5))     #1908403496496
n6 = copy.deepcopy(n5)
print(id(n6))     #1908656936784